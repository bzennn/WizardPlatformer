@startuml
class Program <<static>> {
    {static} Main() : void
}
class WizardPlatformer {
    graphics : GraphicsDeviceManager
    spriteBatch : SpriteBatch
    + WizardPlatformer()
    # <<override>> Initialize() : void
    # <<override>> LoadContent() : void
    # <<override>> UnloadContent() : void
    # <<override>> Update(gameTime:GameTime) : void
    # <<override>> Draw(gameTime:GameTime) : void
}
Game <|-- WizardPlatformer
class Display {
    + {static} <<readonly>> CalcResolution : Vector2
    + {static} <<readonly>> CalcTileSideSize : int = 12
    + {static} <<readonly>> BaseResolution : Vector2
    + {static} <<readonly>> DrawScale : Vector2
    + {static} <<readonly>> TileSideSize : int
    + {static} TargetResolution : Vector2
    + {static} ScreenScale : Matrix
    + {static} GameMatrix : Matrix
    - Display()
    + {static} InitScaleMatrix(graphics:GraphicsDeviceManager, targetWidth:int, targetHeigth:int) : void
    + {static} GetMouseCoordinates(mouseState:MouseState) : Vector2
    + {static} ScreenToLevelPosition(position:Vector2) : Vector2
    + {static} GetZeroScreenPositionOnLevel() : Vector2
    + {static} GetScreenCenter() : Vector2
}
class Geometry <<static>> {
    + {static} GetCollisionDepth(heatBoxA:Rectangle, heatBoxB:Rectangle) : Vector2
}
class InputManager {
    - {static} instance : InputManager
    - currentKeyboardState : KeyboardState
    - previousKeyboardState : KeyboardState
    - InputManager()
    + {static} GetInstance() : InputManager
    + CurrentKeyboardState : KeyboardState <<get>> <<set>>
    + PreviousKeyboardState : KeyboardState <<get>>
    + IsKeyPressed(key:Keys) : bool
    + IsKeyReleased(key:Keys) : bool
    + IsKeyDown(key:Keys) : bool
}
abstract class Entity {
    # health : int
    # damage : int
    - isAlive : bool
    # level : Level
    # surroundingTiles : Tile[]
    # heatBox : Rectangle
    # entityPosition : Vector2
    - previousEntityBottom : float
    # maxVelocity : Vector2
    # maxAcceleration : float
    # gravityAcceleration : float
    # currentVelocity : Vector2
    - currentAcceleration : Vector2
    - movingTime : Vector2
    - emulatePhysics : bool
    # isJumping : bool
    # isFalling : bool
    # isOnGround : bool
    # isFallingThrough : bool
    # isGravityOn : bool
    # isOnMovingPlatform : bool
    # sprite : Texture2D
    # spriteSize : Point
    # spriteFlip : SpriteEffects
    - spritePosition : Vector2
    - spriteOffset : Vector2
    - scaleFactor : int
    # currentFrame : Point
    # frameSize : Point
    # frameTimeCounter : int
    # frameUpdateMillis : int
    movingPlatform : Tile
    # drawDebugInfo : bool
    # debugSprite : Texture2D
    # debugFont : SpriteFont
    + Entity(health:int, damage:int, velocity:float, emulatePhysics:bool, heatBoxWidth:int, heatBoxHeight:int, heatBoxSpritePosX:int, heatBoxSpritePosY:int, posX:int, posY:int, roomSizeId:int, level:Level)
    + <<virtual>> LoadContent(contentManager:ContentManager) : void
    + <<virtual>> Update(gameTime:GameTime) : void
    + Draw(spriteBatch:SpriteBatch, gameTime:GameTime) : void
    # <<virtual>> DrawDebugInfo(spriteBatch:SpriteBatch, gameTime:GameTime) : void
    # EntityPosition : Vector2 <<get>> <<set>>
    + Health : int <<get>>
    + IsAlive : bool <<get>>
    - UpdatePhysics(gameTime:GameTime) : void
    # AccelerateLeft(acceleration:float, crearAcceleration:bool) : void
    # AccelerateRight(acceleration:float, clearAcceleration:bool) : void
    # AccelerateJump(startVelocity:float, maxJumpTime:int, clearAcceleration:bool) : void
    # FallThrough(destroy:bool) : void
    # GetSurrondingTiles(layer:string) : Tile[]
    - GetTileEntitySurrondingTiles() : Tile[]
    - UpdateCollision() : void
    - HandleFuctionalTiles() : void
    # <<virtual>> HandleFunctionalTile(tile:TileFunctional) : void
    + Die() : void
}
class EntityPlayer {
    - coins : int
    + EntityPlayer(health:int, damage:int, velocity:float, coins:int, emulatePhysics:bool, heatBoxWidth:int, heatBoxHeight:int, heatBoxSpritePosX:int, heatBoxSpritePosY:int, posX:int, posY:int, roomSizeId:int, level:Level)
    + <<override>> LoadContent(contentManager:ContentManager) : void
    + <<override>> Update(gameTime:GameTime) : void
    # <<override>> DrawDebugInfo(spriteBatch:SpriteBatch, gameTime:GameTime) : void
    - UpdateInput(gameTime:GameTime) : void
    - UpdateExtraCollisions(gameTime:GameTime) : void
    # <<override>> HandleFunctionalTile(tile:TileFunctional) : void
    - Animate(row:int, frameQuantity:int) : void
    + Position : Vector2 <<get>>
}
Entity <|-- EntityPlayer
class LevelFormatException {
    + LevelFormatException(message:string)
    + LevelFormatException(message:string, innerException:System.Exception)
}
FormatException <|-- LevelFormatException
class LevelMappingException {
    + LevelMappingException(message:string)
    + LevelMappingException(message:string, innerException:Exception)
}
Exception <|-- LevelMappingException
class TileIdMapFormatException {
    + TileIdMapFormatException(message:string)
    + TileIdMapFormatException(message:string, innerException:Exception)
}
FormatException <|-- TileIdMapFormatException
class Level {
    + {static} <<readonly>> RoomSize : Dictionary<int, int[]>
    - levelId : int
    - roomId : int
    - roomSizeId : int
    - roomWidth : int
    - roomHeigth : int
    - levelLoader : LevelLoader
    - background : Texture2D[]
    - tileSideSize : int
    - backLayer : Tile[,]
    - baseLayer : Tile[,]
    - decoLayer : Tile[,]
    - functionalLayer : Tile[,]
    - isTriggerOn : bool
    - currentOpacity : float
    - playerStartPosition : Point
    - player : EntityPlayer
    - entities : List<Entity>
    - tileEntities : List<Tile>
    + Level(levelId:int, roomId:int, levelLoader:LevelLoader, playerStartPosition:Point)
    + LoadContent(contentManager:ContentManager) : void
    + Update(gameTime:GameTime) : void
    + Draw(spriteBatch:SpriteBatch, gameTime:GameTime) : void
    - UpdateLayer(gameTime:GameTime, tileLayer:Tile[,], roomSizeId:int) : void
    - DrawLayer(spriteBatch:SpriteBatch, gameTime:GameTime, tileLayer:Tile[,], roomSizeId:int, opacity:float) : void
    - DrawBackground(spriteBatch:SpriteBatch, gameTime:GameTime, background:Texture2D[]) : void
    + GetTileLayerCoords(posX:float, posY:float) : Point
    + GetTileCoordsFromLayer(x:int, y:int) : Point
    + GetTile(posX:float, posY:float, layer:string) : Tile
    + DestroyTile(tile:Tile) : void
    + SpawnTileEntity(tile:Tile) : void
    + DespawnTileEntity(tile:Tile) : void
    - UpdateTileEntities(gameTime:GameTime) : void
    - DrawTileEntities(spriteBatch:SpriteBatch, gameTime:GameTime) : void
    + TileEntitiesList : List<Tile> <<get>>
    + <<virtual>> HandleTrigger() : void
    - RestoreTrigger() : void
    - UpdateLayersVisibility(gameTime:GameTime, opacitySpeed:float) : void
    + SpawnEntity(entity:Entity) : void
    + DespawnEntity(entity:Entity) : void
    + LoadEntitiesContent(contentManager:ContentManager) : void
    - UpdateEntities(gameTime:GameTime) : void
    - DrawEntities(spriteBatch:SpriteBatch, gameTime:GameTime) : void
    + EntitiesList : List<Entity> <<get>>
    + UpdateCameraPosition() : void
    + RoomWidth : int <<get>>
    + RoomHeigth : int <<get>>
}
abstract class Screen {
    # font : SpriteFont
    # screenContent : ContentManager
    + <<virtual>> Initialize() : void
    + <<virtual>> LoadContent(contentManager:ContentManager) : void
    + <<virtual>> UnloadContent() : void
    + <<virtual>> Update(gameTime:GameTime) : void
    + <<virtual>> Draw(spriteBatch:SpriteBatch, gameTime:GameTime) : void
}
class ScreenError {
    - catchedException : Exception
    + ScreenError(exception:Exception)
    + <<override>> Initialize() : void
    + <<override>> LoadContent(contentManager:ContentManager) : void
    + <<override>> Update(gameTime:GameTime) : void
    + <<override>> Draw(spriteBatch:SpriteBatch, gameTime:GameTime) : void
}
Screen <|-- ScreenError
class ScreenGameplay {
    levelLoader : LevelLoader
    tileSet : Texture2D
    tileSetSize : Point
    currentLevel : Level
    contentManager : ContentManager
    + <<override>> Initialize() : void
    + <<override>> LoadContent(contentManager:ContentManager) : void
    + <<override>> Update(gameTime:GameTime) : void
    + <<override>> Draw(spriteBatch:SpriteBatch, gameTime:GameTime) : void
}
Screen <|-- ScreenGameplay
class ScreenMainMenu {
    + <<override>> Initialize() : void
    + <<override>> LoadContent(contentManager:ContentManager) : void
    + <<override>> Update(gameTime:GameTime) : void
    + <<override>> Draw(spriteBatch:SpriteBatch, gameTime:GameTime) : void
}
Screen <|-- ScreenMainMenu
class ScreenManager {
    - {static} instance : ScreenManager
    - screenStack : Stack<Screen>
    - screenContent : ContentManager
    - ScreenManager()
    + {static} GetInstance() : ScreenManager
    + ChangeScreen(screen:Screen, clearPrevious:bool) : void
    + ReturnPreviousScreen() : void
    + Initialize() : void
    + LoadContent(contentManager:ContentManager) : void
    + UnloadContent() : void
    + Update(gameTime:GameTime) : void
    + Draw(spriteBatch:SpriteBatch, gameTime:GameTime) : void
}
class ScreenPause {
    - previousScreen : Screen
    - background : Texture2D
    + ScreenPause(previousScreen:Screen)
    + <<override>> Initialize() : void
    + <<override>> LoadContent(contentManager:ContentManager) : void
    + <<override>> UnloadContent() : void
    + <<override>> Update(gameTime:GameTime) : void
    + <<override>> Draw(spriteBatch:SpriteBatch, gameTime:GameTime) : void
}
Screen <|-- ScreenPause
class LevelLoader {
    levelMapper : LevelMapper
    + LevelLoader(tileSet:Texture2D, tileSetSize:Point)
    + LoadLevel(levelId:int, roomId:int) : MappedLevelParts
    + GetTileCreator() : TileCreator
}
class LevelMapper {
    - tileCreator : TileCreator
    - tileSideSize : int
    + LevelMapper(tileSet:Texture2D, tileSetSize:Point)
    + MapUnmappedLevelParts(unmappedLevelParts:UnmappedLevelParts) : MappedLevelParts
    + TileCreator : TileCreator <<get>>
}
class MappedLevelParts {
    backgroundId : int
    roomSize : int
    layerBase : Tile[,]
    layerBack : Tile[,]
    layerDeco : Tile[,]
    layerFunctional : Tile[,]
    movingPlatforms : List<TileMovingPlatform>
    + MappedLevelParts(backgroundId:int, roomSize:int, layerBase:Tile[,], layerBack:Tile[,], layerDeco:Tile[,], layerFunctional:Tile[,], movingPlatforms:List<TileMovingPlatform>)
    + BackgoundId : int <<get>>
    + RoomSize : int <<get>>
    + LayerBase : Tile[,] <<get>>
    + LayerBack : Tile[,] <<get>>
    + LayerDeco : Tile[,] <<get>>
    + LayerFunctional : Tile[,] <<get>>
    + MovingPlatforms : List<TileMovingPlatform> <<get>>
}
class TileCreator {
    - calcTileSideSize : int
    - tileIdMap : Dictionary<int, string>
    - tileSet : Texture2D
    - tileSetSize : Point
    - tilePosOnTexture : Point
    + TileCreator(tileIdMap:Dictionary<int, string>, tileSet:Texture2D, tileSetSize:Point)
    + CreateTile(tileId:int, tilePosX:int, tilePosY:int) : Tile
    - GetTilePosOnTextureById(tileId:int) : Point
}
class UnmappedLevelParts {
    backgroundId : int
    roomSize : int
    layerBase : int[]
    layerBack : int[]
    layerDeco : int[]
    layerFunctional : int[]
    movingPlatforms : List<int[]>
    entities : List<int[]>
    + UnmappedLevelParts(backgroundId:int, roomSize:int, layerBase:int[], layerBack:int[], layerDeco:int[], layerFunctional:int[], movingPlatforms:List<int[]>)
    + BackgroundId : int <<get>>
    + RoomSize : int <<get>>
    + LayerBase : int[] <<get>>
    + LayerBack : int[] <<get>>
    + LayerDeco : int[] <<get>>
    + LayerFunctional : int[] <<get>>
    + MovingPlatforms : List<int[]> <<get>>
}
class XMLLevelLoader <<static>> {
    - {static} levelFormatException : LevelFormatException
    + {static} XMLLoadUnmappedLevelParts(levelId:int, roomId:int) : UnmappedLevelParts
    - {static} XMLLoadLevelRaw(levelId:int, roomId:int) : XMLLevelParts
    - {static} PrepareRawLevel(levelParts:XMLLevelParts) : UnmappedLevelParts
}
class XMLLevelParts {
    - backgroundId : string
    - roomSize : string
    - layerBase : string
    - layerBack : string
    - layerDeco : string
    - layerFunctional : string
    - movingPlatforms : List<string>
    - entities : List<string>
    + XMLLevelParts(backgroundId:string, roomSize:string, layerBase:string, layerBack:string, layerDeco:string, layerFunctional:string, movingPlatforms:List<string>, entities:List<string>)
    + BackgroundId : string <<get>>
    + RoomSize : string <<get>>
    + LayerBase : string <<get>>
    + LayerBack : string <<get>>
    + LayerDeco : string <<get>>
    + LayerFunctional : string <<get>>
    + MovingPlatforms : List<string> <<get>>
    + Entities : List<string> <<get>>
}
class XMLTileIdMapLoader <<static>> {
    - {static} tileIdMapFormatException : TileIdMapFormatException
    + {static} XMLLoadTileIdMap(tileSetSize:Point) : Dictionary<int, string>
}
class Tile {
    - heatBox : Rectangle
    - heatBoxOffset : Vector2
    + tilePosition : Vector2
    - sprite : Texture2D
    - spritePosition : Vector2
    - spriteOffset : Vector2
    - spriteOnMap : Rectangle
    - tileSideSize : int
    - scaleFactor : int
    - collision : CollisionType
    - pass : PassType
    # drawDebugInfo : bool
    + Tile(texture:Texture2D, spritePos:Point, collision:CollisionType, pass:PassType, heatBoxWidth:int, heatBoxHeigth:int, heatBoxPosX:int, heatBoxPosY:int, posX:int, posY:int)
    + <<virtual>> Update(gameTime:GameTime) : void
    + <<virtual>> Draw(spriteBatch:SpriteBatch, gameTime:GameTime, opacity:float) : void
    - DrawDebugInfo(spriteBatch:SpriteBatch, gameTime:GameTime) : void
    + TilePosition : Vector2 <<get>> <<set>>
    + Collision : CollisionType <<get>> <<set>>
    + Pass : PassType <<get>>
    + HeatBox : Rectangle <<get>> <<set>>
    + HeatBoxOffset : Vector2 <<get>> <<set>>
    + DebugInfo : bool <<get>> <<set>>
}
enum CollisionType {
    PASSABLE,
    IMPASSABLE,
    PLATFORM,
}
enum PassType {
    REGULAR,
    HOSTILE,
}
Tile +-- CollisionType
Tile +-- PassType
class TileCheckpoint {
    + TileCheckpoint(texture:Texture2D, spritePos:Point, collision:CollisionType, pass:PassType, heatBoxWidth:int, heatBoxHeigth:int, heatBoxPosX:int, heatBoxPosY:int, posX:int, posY:int)
    + <<override>> Update(gameTime:GameTime) : void
    + <<override>> Draw(spriteBatch:SpriteBatch, gameTime:GameTime, opacity:float) : void
}
Tile <|-- TileCheckpoint
class TileChest {
    + TileChest(texture:Texture2D, spritePos:Point, collision:CollisionType, pass:PassType, heatBoxWidth:int, heatBoxHeigth:int, heatBoxPosX:int, heatBoxPosY:int, posX:int, posY:int)
    + <<override>> Update(gameTime:GameTime) : void
    + <<override>> Draw(spriteBatch:SpriteBatch, gameTime:GameTime, opacity:float) : void
}
Tile <|-- TileChest
class TileCollectable {
    + TileCollectable(texture:Texture2D, spritePos:Point, collision:CollisionType, pass:PassType, heatBoxWidth:int, heatBoxHeigth:int, heatBoxPosX:int, heatBoxPosY:int, posX:int, posY:int)
    + <<override>> Update(gameTime:GameTime) : void
    + <<override>> Draw(spriteBatch:SpriteBatch, gameTime:GameTime, opacity:float) : void
}
Tile <|-- TileCollectable
class TileDestroyable {
    + TileDestroyable(texture:Texture2D, spritePos:Point, collision:CollisionType, pass:PassType, heatBoxWidth:int, heatBoxHeigth:int, heatBoxPosX:int, heatBoxPosY:int, posX:int, posY:int)
    + <<override>> Update(gameTime:GameTime) : void
    + <<override>> Draw(spriteBatch:SpriteBatch, gameTime:GameTime, opacity:float) : void
    + Destroy() : void
}
Tile <|-- TileDestroyable
class TileFunctional {
    - type : FunctionType
    + TileFunctional(texture:Texture2D, spritePos:Point, collision:CollisionType, pass:PassType, type:FunctionType, heatBoxWidth:int, heatBoxHeigth:int, heatBoxPosX:int, heatBoxPosY:int, posX:int, posY:int)
    + <<override>> Update(gameTime:GameTime) : void
    + <<override>> Draw(spriteBatch:SpriteBatch, gameTime:GameTime, opacity:float) : void
    + Type : FunctionType <<get>>
}
enum FunctionType {
    EXIT,
    ENTRANCE,
    DEADLY,
    TRIGGER,
}
Tile <|-- TileFunctional
TileFunctional +-- FunctionType
class TileMovingPlatform {
    - level : Level
    - velocity : Vector2
    - previousPosition : Vector2
    - velocityCoefficient : float
    - rail : TileMovingPlatformRail
    - previousRail : TileMovingPlatformRail
    - leftTile : Tile
    - rightTile : Tile
    - isMoving : bool
    + TileMovingPlatform(texture:Texture2D, spritePos:Point, collision:CollisionType, pass:PassType, velocityCoefficient:float, heatBoxWidth:int, heatBoxHeigth:int, heatBoxPosX:int, heatBoxPosY:int, posX:int, posY:int)
    + <<override>> Update(gameTime:GameTime) : void
    + <<override>> Draw(spriteBatch:SpriteBatch, gameTime:GameTime, opacity:float) : void
    - UpdateMoving() : void
    - UpdateRail() : void
    - UpdateVelocity() : void
    - UpdatePosition() : void
    + VelocityCoefficient : float <<get>> <<set>>
    + IsMoving : bool <<get>> <<set>>
    + Velocity : Vector2 <<get>>
    + SetLevel(level:Level) : void
    + SetRightTile(tile:Tile) : void
    + SetLeftTile(tile:Tile) : void
}
Tile <|-- TileMovingPlatform
class TileMovingPlatformRail {
    - direction : Direction
    + TileMovingPlatformRail(texture:Texture2D, spritePos:Point, collision:CollisionType, pass:PassType, direction:Direction, heatBoxWidth:int, heatBoxHeigth:int, heatBoxPosX:int, heatBoxPosY:int, posX:int, posY:int)
    + <<override>> Update(gameTime:GameTime) : void
    + <<override>> Draw(spriteBatch:SpriteBatch, gameTime:GameTime, opacity:float) : void
    + GetBaseDirectionVelocity(invert:bool) : Vector2
    + GetBaseDirectionVelocity(direction:Direction, invert:bool) : Vector2
    + GetUpdateDirectionVelocity(currentVelocity:Vector2) : Vector2
    + GetDirection() : Direction
}
enum Direction {
    VERTICAL,
    HORIZONTAL,
    UP_RIGHT,
    UP_LEFT,
    DOWN_RIGHT,
    DOWN_LEFT,
}
Tile <|-- TileMovingPlatformRail
TileMovingPlatformRail +-- Direction
@enduml
